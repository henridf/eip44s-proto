// Code generated by fastssz. DO NOT EDIT.
// Hash: 32cdf3a72a820613a33d317809d4f18a06867fe6b7449330b7bb3bbb023fd4d0
package spec

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the Blocks object
func (b *Blocks) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(b)
}

// MarshalSSZTo ssz marshals the Blocks object to a target array
func (b *Blocks) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(16)

	// Field (0) 'HeadBlockNumber'
	dst = ssz.MarshalUint64(dst, b.HeadBlockNumber)

	// Field (1) 'BlockCount'
	dst = ssz.MarshalUint32(dst, b.BlockCount)

	// Offset (2) 'Payload'
	dst = ssz.WriteOffset(dst, offset)
	for ii := 0; ii < len(b.Payload); ii++ {
		offset += 4
		offset += b.Payload[ii].SizeSSZ()
	}

	// Field (2) 'Payload'
	if len(b.Payload) > 2000000 {
		err = ssz.ErrListTooBig
		return
	}
	{
		offset = 4 * len(b.Payload)
		for ii := 0; ii < len(b.Payload); ii++ {
			dst = ssz.WriteOffset(dst, offset)
			offset += b.Payload[ii].SizeSSZ()
		}
	}
	for ii := 0; ii < len(b.Payload); ii++ {
		if dst, err = b.Payload[ii].MarshalSSZTo(dst); err != nil {
			return
		}
	}

	return
}

// UnmarshalSSZ ssz unmarshals the Blocks object
func (b *Blocks) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 16 {
		return ssz.ErrSize
	}

	tail := buf
	var o2 uint64

	// Field (0) 'HeadBlockNumber'
	b.HeadBlockNumber = ssz.UnmarshallUint64(buf[0:8])

	// Field (1) 'BlockCount'
	b.BlockCount = ssz.UnmarshallUint32(buf[8:12])

	// Offset (2) 'Payload'
	if o2 = ssz.ReadOffset(buf[12:16]); o2 > size {
		return ssz.ErrOffset
	}

	if o2 < 16 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (2) 'Payload'
	{
		buf = tail[o2:]
		num, err := ssz.DecodeDynamicLength(buf, 2000000)
		if err != nil {
			return err
		}
		b.Payload = make([]*ExecutionPayload, num)
		err = ssz.UnmarshalDynamic(buf, num, func(indx int, buf []byte) (err error) {
			if b.Payload[indx] == nil {
				b.Payload[indx] = new(ExecutionPayload)
			}
			if err = b.Payload[indx].UnmarshalSSZ(buf); err != nil {
				return err
			}
			return nil
		})
		if err != nil {
			return err
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the Blocks object
func (b *Blocks) SizeSSZ() (size int) {
	size = 16

	// Field (2) 'Payload'
	for ii := 0; ii < len(b.Payload); ii++ {
		size += 4
		size += b.Payload[ii].SizeSSZ()
	}

	return
}

// HashTreeRoot ssz hashes the Blocks object
func (b *Blocks) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(b)
}

// HashTreeRootWith ssz hashes the Blocks object with a hasher
func (b *Blocks) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'HeadBlockNumber'
	hh.PutUint64(b.HeadBlockNumber)

	// Field (1) 'BlockCount'
	hh.PutUint32(b.BlockCount)

	// Field (2) 'Payload'
	{
		subIndx := hh.Index()
		num := uint64(len(b.Payload))
		if num > 2000000 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for _, elem := range b.Payload {
			if err = elem.HashTreeRootWith(hh); err != nil {
				return
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 2000000)
	}

	hh.Merkleize(indx)
	return
}

// MarshalSSZ ssz marshals the ExecutionHeader object
func (e *ExecutionHeader) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(e)
}

// MarshalSSZTo ssz marshals the ExecutionHeader object to a target array
func (e *ExecutionHeader) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(576)

	// Field (0) 'ParentHash'
	if len(e.ParentHash) != 32 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, e.ParentHash...)

	// Field (1) 'UncleHash'
	if len(e.UncleHash) != 32 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, e.UncleHash...)

	// Field (2) 'FeeRecipient'
	if len(e.FeeRecipient) != 20 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, e.FeeRecipient...)

	// Field (3) 'StateRoot'
	if len(e.StateRoot) != 32 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, e.StateRoot...)

	// Field (4) 'TxHash'
	if len(e.TxHash) != 32 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, e.TxHash...)

	// Field (5) 'ReceiptsRoot'
	if len(e.ReceiptsRoot) != 32 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, e.ReceiptsRoot...)

	// Field (6) 'LogsBloom'
	if len(e.LogsBloom) != 256 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, e.LogsBloom...)

	// Field (7) 'PrevRandao'
	if len(e.PrevRandao) != 32 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, e.PrevRandao...)

	// Field (8) 'BlockNumber'
	dst = ssz.MarshalUint64(dst, e.BlockNumber)

	// Field (9) 'GasLimit'
	dst = ssz.MarshalUint64(dst, e.GasLimit)

	// Field (10) 'GasUsed'
	dst = ssz.MarshalUint64(dst, e.GasUsed)

	// Field (11) 'Timestamp'
	dst = ssz.MarshalUint64(dst, e.Timestamp)

	// Offset (12) 'ExtraData'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(e.ExtraData)

	// Field (13) 'BaseFeePerGas'
	if len(e.BaseFeePerGas) != 32 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, e.BaseFeePerGas...)

	// Field (14) 'MixDigest'
	if len(e.MixDigest) != 32 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, e.MixDigest...)

	// Field (15) 'Nonce'
	if len(e.Nonce) != 8 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, e.Nonce...)

	// Field (12) 'ExtraData'
	if len(e.ExtraData) > 32 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, e.ExtraData...)

	return
}

// UnmarshalSSZ ssz unmarshals the ExecutionHeader object
func (e *ExecutionHeader) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 576 {
		return ssz.ErrSize
	}

	tail := buf
	var o12 uint64

	// Field (0) 'ParentHash'
	if cap(e.ParentHash) == 0 {
		e.ParentHash = make([]byte, 0, len(buf[0:32]))
	}
	e.ParentHash = append(e.ParentHash, buf[0:32]...)

	// Field (1) 'UncleHash'
	if cap(e.UncleHash) == 0 {
		e.UncleHash = make([]byte, 0, len(buf[32:64]))
	}
	e.UncleHash = append(e.UncleHash, buf[32:64]...)

	// Field (2) 'FeeRecipient'
	if cap(e.FeeRecipient) == 0 {
		e.FeeRecipient = make([]byte, 0, len(buf[64:84]))
	}
	e.FeeRecipient = append(e.FeeRecipient, buf[64:84]...)

	// Field (3) 'StateRoot'
	if cap(e.StateRoot) == 0 {
		e.StateRoot = make([]byte, 0, len(buf[84:116]))
	}
	e.StateRoot = append(e.StateRoot, buf[84:116]...)

	// Field (4) 'TxHash'
	if cap(e.TxHash) == 0 {
		e.TxHash = make([]byte, 0, len(buf[116:148]))
	}
	e.TxHash = append(e.TxHash, buf[116:148]...)

	// Field (5) 'ReceiptsRoot'
	if cap(e.ReceiptsRoot) == 0 {
		e.ReceiptsRoot = make([]byte, 0, len(buf[148:180]))
	}
	e.ReceiptsRoot = append(e.ReceiptsRoot, buf[148:180]...)

	// Field (6) 'LogsBloom'
	if cap(e.LogsBloom) == 0 {
		e.LogsBloom = make([]byte, 0, len(buf[180:436]))
	}
	e.LogsBloom = append(e.LogsBloom, buf[180:436]...)

	// Field (7) 'PrevRandao'
	if cap(e.PrevRandao) == 0 {
		e.PrevRandao = make([]byte, 0, len(buf[436:468]))
	}
	e.PrevRandao = append(e.PrevRandao, buf[436:468]...)

	// Field (8) 'BlockNumber'
	e.BlockNumber = ssz.UnmarshallUint64(buf[468:476])

	// Field (9) 'GasLimit'
	e.GasLimit = ssz.UnmarshallUint64(buf[476:484])

	// Field (10) 'GasUsed'
	e.GasUsed = ssz.UnmarshallUint64(buf[484:492])

	// Field (11) 'Timestamp'
	e.Timestamp = ssz.UnmarshallUint64(buf[492:500])

	// Offset (12) 'ExtraData'
	if o12 = ssz.ReadOffset(buf[500:504]); o12 > size {
		return ssz.ErrOffset
	}

	if o12 < 576 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (13) 'BaseFeePerGas'
	if cap(e.BaseFeePerGas) == 0 {
		e.BaseFeePerGas = make([]byte, 0, len(buf[504:536]))
	}
	e.BaseFeePerGas = append(e.BaseFeePerGas, buf[504:536]...)

	// Field (14) 'MixDigest'
	if cap(e.MixDigest) == 0 {
		e.MixDigest = make([]byte, 0, len(buf[536:568]))
	}
	e.MixDigest = append(e.MixDigest, buf[536:568]...)

	// Field (15) 'Nonce'
	if cap(e.Nonce) == 0 {
		e.Nonce = make([]byte, 0, len(buf[568:576]))
	}
	e.Nonce = append(e.Nonce, buf[568:576]...)

	// Field (12) 'ExtraData'
	{
		buf = tail[o12:]
		if len(buf) > 32 {
			return ssz.ErrBytesLength
		}
		if cap(e.ExtraData) == 0 {
			e.ExtraData = make([]byte, 0, len(buf))
		}
		e.ExtraData = append(e.ExtraData, buf...)
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the ExecutionHeader object
func (e *ExecutionHeader) SizeSSZ() (size int) {
	size = 576

	// Field (12) 'ExtraData'
	size += len(e.ExtraData)

	return
}

// HashTreeRoot ssz hashes the ExecutionHeader object
func (e *ExecutionHeader) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(e)
}

// HashTreeRootWith ssz hashes the ExecutionHeader object with a hasher
func (e *ExecutionHeader) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'ParentHash'
	if len(e.ParentHash) != 32 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(e.ParentHash)

	// Field (1) 'UncleHash'
	if len(e.UncleHash) != 32 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(e.UncleHash)

	// Field (2) 'FeeRecipient'
	if len(e.FeeRecipient) != 20 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(e.FeeRecipient)

	// Field (3) 'StateRoot'
	if len(e.StateRoot) != 32 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(e.StateRoot)

	// Field (4) 'TxHash'
	if len(e.TxHash) != 32 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(e.TxHash)

	// Field (5) 'ReceiptsRoot'
	if len(e.ReceiptsRoot) != 32 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(e.ReceiptsRoot)

	// Field (6) 'LogsBloom'
	if len(e.LogsBloom) != 256 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(e.LogsBloom)

	// Field (7) 'PrevRandao'
	if len(e.PrevRandao) != 32 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(e.PrevRandao)

	// Field (8) 'BlockNumber'
	hh.PutUint64(e.BlockNumber)

	// Field (9) 'GasLimit'
	hh.PutUint64(e.GasLimit)

	// Field (10) 'GasUsed'
	hh.PutUint64(e.GasUsed)

	// Field (11) 'Timestamp'
	hh.PutUint64(e.Timestamp)

	// Field (12) 'ExtraData'
	{
		elemIndx := hh.Index()
		byteLen := uint64(len(e.ExtraData))
		if byteLen > 32 {
			err = ssz.ErrIncorrectListSize
			return
		}
		hh.PutBytes(e.ExtraData)
		hh.MerkleizeWithMixin(elemIndx, byteLen, (32+31)/32)
	}

	// Field (13) 'BaseFeePerGas'
	if len(e.BaseFeePerGas) != 32 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(e.BaseFeePerGas)

	// Field (14) 'MixDigest'
	if len(e.MixDigest) != 32 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(e.MixDigest)

	// Field (15) 'Nonce'
	if len(e.Nonce) != 8 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(e.Nonce)

	hh.Merkleize(indx)
	return
}

// MarshalSSZ ssz marshals the ExecutionPayload object
func (e *ExecutionPayload) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(e)
}

// MarshalSSZTo ssz marshals the ExecutionPayload object to a target array
func (e *ExecutionPayload) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(12)

	// Offset (0) 'Header'
	dst = ssz.WriteOffset(dst, offset)
	if e.Header == nil {
		e.Header = new(ExecutionHeader)
	}
	offset += e.Header.SizeSSZ()

	// Offset (1) 'Transactions'
	dst = ssz.WriteOffset(dst, offset)
	for ii := 0; ii < len(e.Transactions); ii++ {
		offset += 4
		offset += len(e.Transactions[ii])
	}

	// Offset (2) 'Uncles'
	dst = ssz.WriteOffset(dst, offset)
	for ii := 0; ii < len(e.Uncles); ii++ {
		offset += 4
		offset += e.Uncles[ii].SizeSSZ()
	}

	// Field (0) 'Header'
	if dst, err = e.Header.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (1) 'Transactions'
	if len(e.Transactions) > 1048576 {
		err = ssz.ErrListTooBig
		return
	}
	{
		offset = 4 * len(e.Transactions)
		for ii := 0; ii < len(e.Transactions); ii++ {
			dst = ssz.WriteOffset(dst, offset)
			offset += len(e.Transactions[ii])
		}
	}
	for ii := 0; ii < len(e.Transactions); ii++ {
		if len(e.Transactions[ii]) > 1073741824 {
			err = ssz.ErrBytesLength
			return
		}
		dst = append(dst, e.Transactions[ii]...)
	}

	// Field (2) 'Uncles'
	if len(e.Uncles) > 6040 {
		err = ssz.ErrListTooBig
		return
	}
	{
		offset = 4 * len(e.Uncles)
		for ii := 0; ii < len(e.Uncles); ii++ {
			dst = ssz.WriteOffset(dst, offset)
			offset += e.Uncles[ii].SizeSSZ()
		}
	}
	for ii := 0; ii < len(e.Uncles); ii++ {
		if dst, err = e.Uncles[ii].MarshalSSZTo(dst); err != nil {
			return
		}
	}

	return
}

// UnmarshalSSZ ssz unmarshals the ExecutionPayload object
func (e *ExecutionPayload) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 12 {
		return ssz.ErrSize
	}

	tail := buf
	var o0, o1, o2 uint64

	// Offset (0) 'Header'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	if o0 < 12 {
		return ssz.ErrInvalidVariableOffset
	}

	// Offset (1) 'Transactions'
	if o1 = ssz.ReadOffset(buf[4:8]); o1 > size || o0 > o1 {
		return ssz.ErrOffset
	}

	// Offset (2) 'Uncles'
	if o2 = ssz.ReadOffset(buf[8:12]); o2 > size || o1 > o2 {
		return ssz.ErrOffset
	}

	// Field (0) 'Header'
	{
		buf = tail[o0:o1]
		if e.Header == nil {
			e.Header = new(ExecutionHeader)
		}
		if err = e.Header.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}

	// Field (1) 'Transactions'
	{
		buf = tail[o1:o2]
		num, err := ssz.DecodeDynamicLength(buf, 1048576)
		if err != nil {
			return err
		}
		e.Transactions = make([][]byte, num)
		err = ssz.UnmarshalDynamic(buf, num, func(indx int, buf []byte) (err error) {
			if len(buf) > 1073741824 {
				return ssz.ErrBytesLength
			}
			if cap(e.Transactions[indx]) == 0 {
				e.Transactions[indx] = make([]byte, 0, len(buf))
			}
			e.Transactions[indx] = append(e.Transactions[indx], buf...)
			return nil
		})
		if err != nil {
			return err
		}
	}

	// Field (2) 'Uncles'
	{
		buf = tail[o2:]
		num, err := ssz.DecodeDynamicLength(buf, 6040)
		if err != nil {
			return err
		}
		e.Uncles = make([]*ExecutionHeader, num)
		err = ssz.UnmarshalDynamic(buf, num, func(indx int, buf []byte) (err error) {
			if e.Uncles[indx] == nil {
				e.Uncles[indx] = new(ExecutionHeader)
			}
			if err = e.Uncles[indx].UnmarshalSSZ(buf); err != nil {
				return err
			}
			return nil
		})
		if err != nil {
			return err
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the ExecutionPayload object
func (e *ExecutionPayload) SizeSSZ() (size int) {
	size = 12

	// Field (0) 'Header'
	if e.Header == nil {
		e.Header = new(ExecutionHeader)
	}
	size += e.Header.SizeSSZ()

	// Field (1) 'Transactions'
	for ii := 0; ii < len(e.Transactions); ii++ {
		size += 4
		size += len(e.Transactions[ii])
	}

	// Field (2) 'Uncles'
	for ii := 0; ii < len(e.Uncles); ii++ {
		size += 4
		size += e.Uncles[ii].SizeSSZ()
	}

	return
}

// HashTreeRoot ssz hashes the ExecutionPayload object
func (e *ExecutionPayload) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(e)
}

// HashTreeRootWith ssz hashes the ExecutionPayload object with a hasher
func (e *ExecutionPayload) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'Header'
	if err = e.Header.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (1) 'Transactions'
	{
		subIndx := hh.Index()
		num := uint64(len(e.Transactions))
		if num > 1048576 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for _, elem := range e.Transactions {
			{
				elemIndx := hh.Index()
				byteLen := uint64(len(elem))
				if byteLen > 1073741824 {
					err = ssz.ErrIncorrectListSize
					return
				}
				hh.AppendBytes32(elem)
				hh.MerkleizeWithMixin(elemIndx, byteLen, (1073741824+31)/32)
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 1048576)
	}

	// Field (2) 'Uncles'
	{
		subIndx := hh.Index()
		num := uint64(len(e.Uncles))
		if num > 6040 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for _, elem := range e.Uncles {
			if err = elem.HashTreeRootWith(hh); err != nil {
				return
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 6040)
	}

	hh.Merkleize(indx)
	return
}

// MarshalSSZ ssz marshals the ReceiptPayload object
func (r *ReceiptPayload) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(r)
}

// MarshalSSZTo ssz marshals the ReceiptPayload object to a target array
func (r *ReceiptPayload) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(413)

	// Field (0) 'ReceiptType'
	dst = ssz.MarshalUint8(dst, r.ReceiptType)

	// Field (1) 'PostState'
	if len(r.PostState) != 32 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, r.PostState...)

	// Field (2) 'Status'
	dst = ssz.MarshalUint64(dst, r.Status)

	// Field (3) 'CumulativeGasUsed'
	dst = ssz.MarshalUint64(dst, r.CumulativeGasUsed)

	// Field (4) 'Bloom'
	if len(r.Bloom) != 256 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, r.Bloom...)

	// Offset (5) 'Logs'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(r.Logs) * 0

	// Field (6) 'TxHash'
	if len(r.TxHash) != 32 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, r.TxHash...)

	// Field (7) 'ContractAddress'
	if len(r.ContractAddress) != 20 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, r.ContractAddress...)

	// Field (8) 'GasUsed'
	dst = ssz.MarshalUint64(dst, r.GasUsed)

	// Field (9) 'BlockHash'
	if len(r.BlockHash) != 32 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, r.BlockHash...)

	// Field (10) 'BlockNumber'
	dst = ssz.MarshalUint64(dst, r.BlockNumber)

	// Field (11) 'TxIndex'
	dst = ssz.MarshalUint32(dst, r.TxIndex)

	// Field (5) 'Logs'
	if len(r.Logs) > 4194533 {
		err = ssz.ErrListTooBig
		return
	}
	for ii := 0; ii < len(r.Logs); ii++ {
		if dst, err = r.Logs[ii].MarshalSSZTo(dst); err != nil {
			return
		}
	}

	return
}

// UnmarshalSSZ ssz unmarshals the ReceiptPayload object
func (r *ReceiptPayload) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 413 {
		return ssz.ErrSize
	}

	tail := buf
	var o5 uint64

	// Field (0) 'ReceiptType'
	r.ReceiptType = ssz.UnmarshallUint8(buf[0:1])

	// Field (1) 'PostState'
	if cap(r.PostState) == 0 {
		r.PostState = make([]byte, 0, len(buf[1:33]))
	}
	r.PostState = append(r.PostState, buf[1:33]...)

	// Field (2) 'Status'
	r.Status = ssz.UnmarshallUint64(buf[33:41])

	// Field (3) 'CumulativeGasUsed'
	r.CumulativeGasUsed = ssz.UnmarshallUint64(buf[41:49])

	// Field (4) 'Bloom'
	if cap(r.Bloom) == 0 {
		r.Bloom = make([]byte, 0, len(buf[49:305]))
	}
	r.Bloom = append(r.Bloom, buf[49:305]...)

	// Offset (5) 'Logs'
	if o5 = ssz.ReadOffset(buf[305:309]); o5 > size {
		return ssz.ErrOffset
	}

	if o5 < 413 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (6) 'TxHash'
	if cap(r.TxHash) == 0 {
		r.TxHash = make([]byte, 0, len(buf[309:341]))
	}
	r.TxHash = append(r.TxHash, buf[309:341]...)

	// Field (7) 'ContractAddress'
	if cap(r.ContractAddress) == 0 {
		r.ContractAddress = make([]byte, 0, len(buf[341:361]))
	}
	r.ContractAddress = append(r.ContractAddress, buf[341:361]...)

	// Field (8) 'GasUsed'
	r.GasUsed = ssz.UnmarshallUint64(buf[361:369])

	// Field (9) 'BlockHash'
	if cap(r.BlockHash) == 0 {
		r.BlockHash = make([]byte, 0, len(buf[369:401]))
	}
	r.BlockHash = append(r.BlockHash, buf[369:401]...)

	// Field (10) 'BlockNumber'
	r.BlockNumber = ssz.UnmarshallUint64(buf[401:409])

	// Field (11) 'TxIndex'
	r.TxIndex = ssz.UnmarshallUint32(buf[409:413])

	// Field (5) 'Logs'
	{
		buf = tail[o5:]
		num, err := ssz.DivideInt2(len(buf), 0, 4194533)
		if err != nil {
			return err
		}
		r.Logs = make([]*LogPayload, num)
		for ii := 0; ii < num; ii++ {
			if r.Logs[ii] == nil {
				r.Logs[ii] = new(LogPayload)
			}
			if err = r.Logs[ii].UnmarshalSSZ(buf[ii*0 : (ii+1)*0]); err != nil {
				return err
			}
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the ReceiptPayload object
func (r *ReceiptPayload) SizeSSZ() (size int) {
	size = 413

	// Field (5) 'Logs'
	size += len(r.Logs) * 0

	return
}

// HashTreeRoot ssz hashes the ReceiptPayload object
func (r *ReceiptPayload) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(r)
}

// HashTreeRootWith ssz hashes the ReceiptPayload object with a hasher
func (r *ReceiptPayload) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'ReceiptType'
	hh.PutUint8(r.ReceiptType)

	// Field (1) 'PostState'
	if len(r.PostState) != 32 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(r.PostState)

	// Field (2) 'Status'
	hh.PutUint64(r.Status)

	// Field (3) 'CumulativeGasUsed'
	hh.PutUint64(r.CumulativeGasUsed)

	// Field (4) 'Bloom'
	if len(r.Bloom) != 256 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(r.Bloom)

	// Field (5) 'Logs'
	{
		subIndx := hh.Index()
		num := uint64(len(r.Logs))
		if num > 4194533 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for _, elem := range r.Logs {
			if err = elem.HashTreeRootWith(hh); err != nil {
				return
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 4194533)
	}

	// Field (6) 'TxHash'
	if len(r.TxHash) != 32 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(r.TxHash)

	// Field (7) 'ContractAddress'
	if len(r.ContractAddress) != 20 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(r.ContractAddress)

	// Field (8) 'GasUsed'
	hh.PutUint64(r.GasUsed)

	// Field (9) 'BlockHash'
	if len(r.BlockHash) != 32 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(r.BlockHash)

	// Field (10) 'BlockNumber'
	hh.PutUint64(r.BlockNumber)

	// Field (11) 'TxIndex'
	hh.PutUint32(r.TxIndex)

	hh.Merkleize(indx)
	return
}

// MarshalSSZ ssz marshals the LogPayload object
func (l *LogPayload) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(l)
}

// MarshalSSZTo ssz marshals the LogPayload object to a target array
func (l *LogPayload) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	return
}

// UnmarshalSSZ ssz unmarshals the LogPayload object
func (l *LogPayload) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 0 {
		return ssz.ErrSize
	}

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the LogPayload object
func (l *LogPayload) SizeSSZ() (size int) {
	size = 0
	return
}

// HashTreeRoot ssz hashes the LogPayload object
func (l *LogPayload) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(l)
}

// HashTreeRootWith ssz hashes the LogPayload object with a hasher
func (l *LogPayload) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	hh.Merkleize(indx)
	return
}
