// Code generated by fastssz. DO NOT EDIT.
// Hash: bbb4d6e03aebee8366e0c03205bcdfbde7d80cf2ed3a83621a128f36e884e72a
package spec

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the Blocks object
func (b *Blocks) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(b)
}

// MarshalSSZTo ssz marshals the Blocks object to a target array
func (b *Blocks) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(4)

	// Offset (0) 'RlpPayload'
	dst = ssz.WriteOffset(dst, offset)
	for ii := 0; ii < len(b.RlpPayload); ii++ {
		offset += 4
		offset += len(b.RlpPayload[ii])
	}

	// Field (0) 'RlpPayload'
	if len(b.RlpPayload) > 100 {
		err = ssz.ErrListTooBig
		return
	}
	{
		offset = 4 * len(b.RlpPayload)
		for ii := 0; ii < len(b.RlpPayload); ii++ {
			dst = ssz.WriteOffset(dst, offset)
			offset += len(b.RlpPayload[ii])
		}
	}
	for ii := 0; ii < len(b.RlpPayload); ii++ {
		if len(b.RlpPayload[ii]) > 268435456 {
			err = ssz.ErrBytesLength
			return
		}
		dst = append(dst, b.RlpPayload[ii]...)
	}

	return
}

// UnmarshalSSZ ssz unmarshals the Blocks object
func (b *Blocks) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 4 {
		return ssz.ErrSize
	}

	tail := buf
	var o0 uint64

	// Offset (0) 'RlpPayload'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	if o0 < 4 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (0) 'RlpPayload'
	{
		buf = tail[o0:]
		num, err := ssz.DecodeDynamicLength(buf, 100)
		if err != nil {
			return err
		}
		b.RlpPayload = make([][]byte, num)
		err = ssz.UnmarshalDynamic(buf, num, func(indx int, buf []byte) (err error) {
			if len(buf) > 268435456 {
				return ssz.ErrBytesLength
			}
			if cap(b.RlpPayload[indx]) == 0 {
				b.RlpPayload[indx] = make([]byte, 0, len(buf))
			}
			b.RlpPayload[indx] = append(b.RlpPayload[indx], buf...)
			return nil
		})
		if err != nil {
			return err
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the Blocks object
func (b *Blocks) SizeSSZ() (size int) {
	size = 4

	// Field (0) 'RlpPayload'
	for ii := 0; ii < len(b.RlpPayload); ii++ {
		size += 4
		size += len(b.RlpPayload[ii])
	}

	return
}

// HashTreeRoot ssz hashes the Blocks object
func (b *Blocks) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(b)
}

// HashTreeRootWith ssz hashes the Blocks object with a hasher
func (b *Blocks) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'RlpPayload'
	{
		subIndx := hh.Index()
		num := uint64(len(b.RlpPayload))
		if num > 100 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for _, elem := range b.RlpPayload {
			{
				elemIndx := hh.Index()
				byteLen := uint64(len(elem))
				if byteLen > 268435456 {
					err = ssz.ErrIncorrectListSize
					return
				}
				hh.AppendBytes32(elem)
				hh.MerkleizeWithMixin(elemIndx, byteLen, (268435456+31)/32)
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 100)
	}

	hh.Merkleize(indx)
	return
}
